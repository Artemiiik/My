/*
=======================================
Name: PlotFiller.cpp
Author: Yunin Artem (Artemiiik)
Date: 05.05.2021
Version: 1.1
Copiright: freeware
Description:
This program is designed to fill in 
a plot file in the form of a plot tree
=======================================
*/

#include <iostream>
#include <fstream>
#include <string>
#include <Windows.h> 
using namespace std;

int main()
{
	// Кодировка консоли - 1251
	SetConsoleOutputCP(1251);
	SetConsoleCP(1251);

	// Открытие сюжетного файла Plot.txt
	ofstream outf("Plot.txt");

	// Заполнение файла
	cout << "~Перед вами программа для заполнения сюжетного файла.\n"
		<< "Сюжет представляет собой направленное дерево с вершинами,\n"
		<< "представленными в виде двух строк: действия и ситуации,\n"
		<< "к которой ведет действие. Заполнение обязательно должно\n"
		<< "начинаться с корневой вершины (действие можно не вводить)\n"
		<< "и быть упорядочено (сверху вниз, слева направо).\n"
		<< "Специальные символы: # и * (нельзя использовать)\n";
	int verticesCount{ 1 }; // количество вершин к заполнению (считается из суммы степеней вершин)
	for(int i = 1; i <= verticesCount; i++)
	{
		// Ввод степени вершины
		cout << "\n~Введите степень вершины " << i << ": ";
		int verticePow{}; // степень вершины
		while (!(cin >> verticePow) || cin.peek() != '\n' || verticePow < 0) // проверка ввода числа на корректность
		{
			cin.clear(); // очистка потока от ошибок
			while (cin.get() != '\n'); // удаление символа переноса каретки из потока
			cout << "~Неверно введено значение. Попробуйте еще: ";
		}
		cin.ignore(); // удаление символа переноса каретки из потока
		verticesCount += verticePow; // считаем новое количество вершин к заполнению

		// Ввод действия 
		cout << "~Введите действие, приводящее к ситуации:\n";
		string action{};
		getline(cin, action);
		while (action.find('#') != string::npos || action.find('*') != string::npos)
		{
			cout << "~Строка содержит запрещенные символы. Попробуйте еще:\n";
			getline(cin, action);
		}

		// Ввод ситуации
		cout << "~Введите ситуацию:\n";
		string situation{};
		getline(cin, situation);
		while (situation.find('#') != string::npos || situation.find('*') != string::npos)
		{
			cout << "~Строка содержит запрещенные символы. Попробуйте еще:\n";
			getline(cin, situation);
		}

		// Заполнение данных вершины в файле
		outf << '#' << verticePow << '#' // степень вершины
			<< action // строка с действием
			<< '*' // разделитель строки с действием и строки с ситуацией
			<< situation << '\n' // строка с ситуацией
			<< flush; // очистка буфера
	}
	outf.close(); // закрываем файл

	// Конечный вывод программы
	cout << endl;
	system("Pause");
}